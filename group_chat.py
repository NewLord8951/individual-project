import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from loguru import logger
from mat import contains_bad_words
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token="YOUR_BOT_TOKEN")
storage = RedisStorage.from_url("redis://localhost:6379/0")
dp = Dispatcher(storage=storage)

class UserWarnings(StatesGroup):
    warning_1 = State()  # –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    warning_2 = State()  # –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    banned = State()     # –ë–∞–Ω

STICKER_ID = "CAACAgIAAxkBAAEPHGZoJcDcrCtFMH4AAbcSPIzwcUP4x7cAAuBJAAJsvglLbTF7IeyHYuA2BA"
group_games = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger.add("debug.log", rotation="1 MB", level="DEBUG")

def setup_group_handlers(dp: Dispatcher):
    @dp.message(Command('start'), F.chat.type.in_({"group", "supergroup"}))
    async def start_game(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"""
        chat_id = message.chat.id
        group_games[chat_id] = random.randint(1, 100)
        await message.answer(
            "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /guess <—á–∏—Å–ª–æ>"
        )
        logger.info(f"–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")

    @dp.message(Command('guess'), F.chat.type.in_({"group", "supergroup"}))
    async def make_guess(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /guess –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ"""
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if contains_bad_words(message.text):
            await handle_bad_words(message)
            return
            
        if chat_id not in group_games:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        try:
            guess = int(message.text.split()[1])
        except (IndexError, ValueError):
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /guess 42")
            return

        secret = group_games[chat_id]

        if guess < secret:
            await message.answer("üî∫ –ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ!")
        elif guess > secret:
            await message.answer("üîª –ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ!")
        else:
            await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {secret}!")
            del group_games[chat_id]
            logger.info(f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}")

    async def handle_bad_words(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ç–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_state = await dp.storage.get_state(chat=chat_id, user=user_id)
        
        if current_state == UserWarnings.warning_1.state:
            await dp.storage.set_state(chat=chat_id, user=user_id, state=UserWarnings.warning_2)
            await message.answer_sticker(STICKER_ID)
            await message.answer("üö® –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç ‚Äî –±–∞–Ω.")
            logger.warning(f"–í—Ç–æ—Ä–æ–π –º–∞—Ç –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}")
            
        elif current_state == UserWarnings.warning_2.state:
            await dp.storage.set_state(chat=chat_id, user=user_id, state=UserWarnings.banned)
            await message.answer_sticker(STICKER_ID)
            await bot.ban_chat_member(chat_id, user_id)
            await message.answer(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –º–∞—Ç—ã.")
            logger.error(f"–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
            
        else:  # –ü–µ—Ä–≤–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
            await dp.storage.set_state(chat=chat_id, user=user_id, state=UserWarnings.warning_1)
            await message.answer_sticker(STICKER_ID)
            await message.answer("‚ö†Ô∏è –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ ‚Äî –±–∞–Ω.")
            logger.warning(f"–ü–µ—Ä–≤—ã–π –º–∞—Ç –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}")

    @dp.message(Command("reset_warnings"))
    async def reset_warnings(message: types.Message, state: FSMContext):
        """–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await state.clear()
        await message.answer("–í–∞—à–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.")
        logger.info(f"–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è {message.from_user.id}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    dp.run_polling(bot)