from loguru import logger
from aiogram import Dispatcher, types, F, Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from reply import get_keyboard
from mat import contains_bad_words

router = Router()
scores = {}
STICKER_ID = "CAACAgIAAxkBAAEPHGZoJcDcrCtFMH4AAbcSPIzwcUP4x7cAAuBJAAJsvglLbTF7IeyHYuA2BA"


class QuizState(StatesGroup):
    question_0 = State()
    question_1 = State()
    question_2 = State()
    question_3 = State()
    question_4 = State()


class UserWarningsPrivate(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
    no_warning = State()
    first_warning = State()
    second_warning = State()
    banned = State()


class WarningSystemPrivate:
    def __init__(self, dp: Dispatcher, bot: Bot):
        self.dp = dp
        self.bot = bot
        self.register_handlers()

    def register_handlers(self):
        @self.dp.message(F.text & F.chat.type == "private")
        async def handle_private_messages(message: types.Message, state: FSMContext):
            quiz_state = await state.get_state()
            if quiz_state and quiz_state.startswith("QuizState:"):
                return

            current_warning_state = await state.get_state()
            if current_warning_state == UserWarningsPrivate.banned.state:
                await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
                return

            if contains_bad_words(message.text.lower()):
                if current_warning_state == UserWarningsPrivate.first_warning.state:
                    await state.set_state(UserWarningsPrivate.second_warning)
                    await message.answer_sticker(STICKER_ID)
                    await message.answer("üö® –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –≤—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")

                elif current_warning_state == UserWarningsPrivate.second_warning.state:
                    await state.set_state(UserWarningsPrivate.banned)
                    await message.answer_sticker(STICKER_ID)
                    await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª!")
                    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")  

                else:
                    await state.set_state(UserWarningsPrivate.first_warning)
                    await message.answer_sticker(STICKER_ID)
                    await message.answer("‚ö†Ô∏è –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è.")
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")


def register_private_handlers(dp: Dispatcher, bot: Bot):
    dp.include_router(router)

    async def check_banned(message: types.Message, state: FSMContext) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        current_state = await state.get_state()
        if current_state == UserWarningsPrivate.banned.state:
            await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return True
        return False

    @router.message(Command('start'), F.chat.type == "private")
    async def cmd_start(message: types.Message, state: FSMContext):
        if await check_banned(message, state):
            return

        scores[message.from_user.id] = 0
        await state.set_state(UserWarningsPrivate.no_warning)
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–Ω–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.')
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
        await send_question_0(message, state)

    @router.message(QuizState.question_0, F.chat.type == "private")
    async def handle_answer_0(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state == UserWarningsPrivate.banned.state:
            return

        user_id = message.from_user.id

        if message.text in ["a0", "b0", "c0", "d0"]:
            await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!')
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å 0')
            await send_question_1(message, state)
            if message.text == "c0":
                scores[user_id] += 1
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç')
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")

    @router.message(QuizState.question_1, F.chat.type == "private")
    async def handle_answer_1(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state == UserWarningsPrivate.banned.state:
            return

        user_id = message.from_user.id

        if message.text in ["a1", "b1", "c1", "d1"]:
            await message.answer('–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!')
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å 1')
            await send_question_2(message, state)
            if message.text == "a1":
                scores[user_id] += 1
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç')
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")

    @router.message(QuizState.question_2, F.chat.type == "private")
    async def handle_answer_2(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state == UserWarningsPrivate.banned.state:
            return

        user_id = message.from_user.id

        if message.text in ["a2", "b2", "c2", "d2"]:
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.')
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å 2')
            await send_question_3(message, state)
            if message.text == "a2":
                scores[user_id] += 1
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç')
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")

    @router.message(QuizState.question_3, F.chat.type == "private")
    async def handle_answer_3(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state == UserWarningsPrivate.banned.state:
            return

        user_id = message.from_user.id

        if message.text in ["a3", "b3", "c3", "d3"]:
            await message.answer('–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç!')
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å 3')
            await send_question_4(message, state)
            if message.text == "b3":
                scores[user_id] += 1
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç')
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")

    @router.message(QuizState.question_4, F.chat.type == "private")
    async def handle_answer_4(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state == UserWarningsPrivate.banned.state:
            return

        user_id = message.from_user.id

        if message.text in ["a4", "b4", "c4", "d4"]:
            await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!')
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å 4')
            if message.text == "d4":
                scores[user_id] += 1
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç')

            result = {
                1: "20%",
                2: "40%",
                3: "60%",
                4: "80%",
                5: "100%"
            }.get(scores[user_id], "0%")

            await message.answer(f"üéâ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
            await state.set_state(UserWarningsPrivate.no_warning)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")


async def send_question_0(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == UserWarningsPrivate.banned.state:
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ")
        return

    await state.set_state(QuizState.question_0)
    await message.answer(
        "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: –±–ª–±–ª–±–ª–±–ª–±?",
        reply_markup=get_keyboard(
            "a0",
            "b0",
            "c0",
            "d0",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            sizes=(2, 2)
        ),
    )


async def send_question_1(message: types.Message, state: FSMContext):
    await state.set_state(QuizState.question_1)
    await message.answer(
        "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≥—É–≥—É–≥–∞–≥–∞?",
        reply_markup=get_keyboard(
            "a1",
            "b1",
            "c1",
            "d1",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            sizes=(2, 2)
        ),
    )


async def send_question_2(message: types.Message, state: FSMContext):
    await state.set_state(QuizState.question_2)
    await message.answer(
        "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–∞–¥–∞–¥–∞??",
        reply_markup=get_keyboard(
            "a2",
            "b2",
            "c2",
            "d2",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            sizes=(2, 2)
        ),
    )


async def send_question_3(message: types.Message, state: FSMContext):
    await state.set_state(QuizState.question_3)
    await message.answer(
        "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ª–∏–Ω–≥–∞–Ω–≥—É??",
        reply_markup=get_keyboard(
            "a3",
            "b3",
            "c3",
            "d3",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            sizes=(2, 2)
        ),
    )


async def send_question_4(message: types.Message, state: FSMContext):
    await state.set_state(QuizState.question_4)
    await message.answer(
        "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≥—É–ª–∏–≥—É–ª–∏??",
        reply_markup=get_keyboard(
            "a4",
            "b4",
            "c4",
            "d4",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            sizes=(2, 2)
        ),
    )
